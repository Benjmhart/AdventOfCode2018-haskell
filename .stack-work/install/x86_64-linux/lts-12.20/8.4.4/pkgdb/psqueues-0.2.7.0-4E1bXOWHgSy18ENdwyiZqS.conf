name: psqueues
version: 0.2.7.0
id: psqueues-0.2.7.0-4E1bXOWHgSy18ENdwyiZqS
key: psqueues-0.2.7.0-4E1bXOWHgSy18ENdwyiZqS
license: BSD-3-Clause
maintainer: Jasper Van der Jeugt <jaspervdj@gmail.com>
synopsis: Pure priority search queues
description:
    The psqueues package provides
    <http://en.wikipedia.org/wiki/Priority_queue Priority Search Queues> in
    three different flavors.
    .
    * @OrdPSQ k p v@, which uses the @Ord k@ instance to provide fast insertion,
    deletion and lookup. This implementation is based on Ralf Hinze's
    <http://citeseer.ist.psu.edu/hinze01simple.html A Simple Implementation Technique for Priority Search Queues>.
    Hence, it is similar to the
    <http://hackage.haskell.org/package/PSQueue PSQueue> library, although it is
    considerably faster and provides a slightly different API.
    .
    * @IntPSQ p v@ is a far more efficient implementation. It fixes the key type
    to @Int@ and uses a <http://en.wikipedia.org/wiki/Radix_tree radix tree>
    (like @IntMap@) with an additional min-heap property.
    .
    * @HashPSQ k p v@ is a fairly straightforward extension of @IntPSQ@: it
    simply uses the keys' hashes as indices in the @IntPSQ@. If there are any
    hash collisions, it uses an @OrdPSQ@ to resolve those. The performance of
    this implementation is comparable to that of @IntPSQ@, but it is more widely
    applicable since the keys are not restricted to @Int@, but rather to any
    @Hashable@ datatype.
    .
    Each of the three implementations provides the same API, so they can be used
    interchangeably. The benchmarks show how they perform relative to one
    another, and also compared to the other Priority Search Queue
    implementations on Hackage:
    <http://hackage.haskell.org/package/PSQueue PSQueue>
    and
    <http://hackage.haskell.org/package/fingertree-psqueue fingertree-psqueue>.
    .
    <<http://i.imgur.com/KmbDKR6.png>>
    .
    <<http://i.imgur.com/ClT181D.png>>
    .
    Typical applications of Priority Search Queues include:
    .
    * Caches, and more specifically LRU Caches;
    .
    * Schedulers;
    .
    * Pathfinding algorithms, such as Dijkstra's and A*.
category: Data Structures
abi: 89bf780690e5f598733e8cbf072ce962
exposed: True
exposed-modules:
    Data.HashPSQ Data.IntPSQ Data.OrdPSQ
hidden-modules: Data.BitUtil Data.HashPSQ.Internal
                Data.IntPSQ.Internal Data.OrdPSQ.Internal
import-dirs: /home/bhart/projects/advent/.stack-work/install/x86_64-linux/lts-12.20/8.4.4/lib/x86_64-linux-ghc-8.4.4/psqueues-0.2.7.0-4E1bXOWHgSy18ENdwyiZqS
library-dirs: /home/bhart/projects/advent/.stack-work/install/x86_64-linux/lts-12.20/8.4.4/lib/x86_64-linux-ghc-8.4.4/psqueues-0.2.7.0-4E1bXOWHgSy18ENdwyiZqS
dynamic-library-dirs: /home/bhart/projects/advent/.stack-work/install/x86_64-linux/lts-12.20/8.4.4/lib/x86_64-linux-ghc-8.4.4
data-dir: /home/bhart/projects/advent/.stack-work/install/x86_64-linux/lts-12.20/8.4.4/share/x86_64-linux-ghc-8.4.4/psqueues-0.2.7.0
hs-libraries: HSpsqueues-0.2.7.0-4E1bXOWHgSy18ENdwyiZqS
depends:
    base-4.11.1.0 deepseq-1.4.3.0-FLYmiHmyGRsHyUzvH72JAU
    hashable-1.2.7.0-5F6s6UbzRUr4P3ucpxdtoP ghc-prim-0.5.2.0
abi-depends: base-4.11.1.0=5dd741007d6cdd784ac4032dc52ae6cd
             deepseq-1.4.3.0-FLYmiHmyGRsHyUzvH72JAU=e946cfa9468945aa4793cdc0ddc8ed89
             hashable-1.2.7.0-5F6s6UbzRUr4P3ucpxdtoP=4b8c9ea7d508da8fd5f5cf4ab3289482
             ghc-prim-0.5.2.0=0a2596c0f516eb6cbf13841c1f06715e
haddock-interfaces: /home/bhart/projects/advent/.stack-work/install/x86_64-linux/lts-12.20/8.4.4/doc/psqueues-0.2.7.0/psqueues.haddock
haddock-html: /home/bhart/projects/advent/.stack-work/install/x86_64-linux/lts-12.20/8.4.4/doc/psqueues-0.2.7.0
